// Generated by gencpp from file gripper_action/gripperMoveGoal.msg
// DO NOT EDIT!


#ifndef GRIPPER_ACTION_MESSAGE_GRIPPERMOVEGOAL_H
#define GRIPPER_ACTION_MESSAGE_GRIPPERMOVEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gripper_action
{
template <class ContainerAllocator>
struct gripperMoveGoal_
{
  typedef gripperMoveGoal_<ContainerAllocator> Type;

  gripperMoveGoal_()
    : width(0.0)
    , speed(0)
    , force(0)
    , type(0)  {
    }
  gripperMoveGoal_(const ContainerAllocator& _alloc)
    : width(0.0)
    , speed(0)
    , force(0)
    , type(0)  {
  (void)_alloc;
    }



   typedef float _width_type;
  _width_type width;

   typedef int32_t _speed_type;
  _speed_type speed;

   typedef int32_t _force_type;
  _force_type force;

   typedef int32_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::gripper_action::gripperMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gripper_action::gripperMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct gripperMoveGoal_

typedef ::gripper_action::gripperMoveGoal_<std::allocator<void> > gripperMoveGoal;

typedef boost::shared_ptr< ::gripper_action::gripperMoveGoal > gripperMoveGoalPtr;
typedef boost::shared_ptr< ::gripper_action::gripperMoveGoal const> gripperMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gripper_action::gripperMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gripper_action::gripperMoveGoal_<ContainerAllocator1> & lhs, const ::gripper_action::gripperMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.speed == rhs.speed &&
    lhs.force == rhs.force &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gripper_action::gripperMoveGoal_<ContainerAllocator1> & lhs, const ::gripper_action::gripperMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gripper_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_action::gripperMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_action::gripperMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_action::gripperMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "099fd3e83221576cc0767cfa847e1828";
  }

  static const char* value(const ::gripper_action::gripperMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x099fd3e83221576cULL;
  static const uint64_t static_value2 = 0xc0767cfa847e1828ULL;
};

template<class ContainerAllocator>
struct DataType< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gripper_action/gripperMoveGoal";
  }

  static const char* value(const ::gripper_action::gripperMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 width # [mm]\n"
"int32 speed \n"
"int32 force \n"
"int32 type\n"
;
  }

  static const char* value(const ::gripper_action::gripperMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.speed);
      stream.next(m.force);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gripperMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gripper_action::gripperMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gripper_action::gripperMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "force: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIPPER_ACTION_MESSAGE_GRIPPERMOVEGOAL_H

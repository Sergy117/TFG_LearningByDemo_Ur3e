// Generated by gencpp from file onrobot_gripper_msgs/OnrobotGripperCommand.msg
// DO NOT EDIT!


#ifndef ONROBOT_GRIPPER_MSGS_MESSAGE_ONROBOTGRIPPERCOMMAND_H
#define ONROBOT_GRIPPER_MSGS_MESSAGE_ONROBOTGRIPPERCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace onrobot_gripper_msgs
{
template <class ContainerAllocator>
struct OnrobotGripperCommand_
{
  typedef OnrobotGripperCommand_<ContainerAllocator> Type;

  OnrobotGripperCommand_()
    : position(0.0)
    , max_effort(0.0)  {
    }
  OnrobotGripperCommand_(const ContainerAllocator& _alloc)
    : position(0.0)
    , max_effort(0.0)  {
  (void)_alloc;
    }



   typedef double _position_type;
  _position_type position;

   typedef double _max_effort_type;
  _max_effort_type max_effort;





  typedef boost::shared_ptr< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> const> ConstPtr;

}; // struct OnrobotGripperCommand_

typedef ::onrobot_gripper_msgs::OnrobotGripperCommand_<std::allocator<void> > OnrobotGripperCommand;

typedef boost::shared_ptr< ::onrobot_gripper_msgs::OnrobotGripperCommand > OnrobotGripperCommandPtr;
typedef boost::shared_ptr< ::onrobot_gripper_msgs::OnrobotGripperCommand const> OnrobotGripperCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator1> & lhs, const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.max_effort == rhs.max_effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator1> & lhs, const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onrobot_gripper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "680acaff79486f017132a7f198d40f08";
  }

  static const char* value(const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x680acaff79486f01ULL;
  static const uint64_t static_value2 = 0x7132a7f198d40f08ULL;
};

template<class ContainerAllocator>
struct DataType< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onrobot_gripper_msgs/OnrobotGripperCommand";
  }

  static const char* value(const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position\n"
"float64 max_effort\n"
;
  }

  static const char* value(const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.max_effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnrobotGripperCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onrobot_gripper_msgs::OnrobotGripperCommand_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "max_effort: ";
    Printer<double>::stream(s, indent + "  ", v.max_effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONROBOT_GRIPPER_MSGS_MESSAGE_ONROBOTGRIPPERCOMMAND_H
